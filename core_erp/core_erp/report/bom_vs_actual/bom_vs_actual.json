{
 "add_total_row": 1,
 "creation": "2022-06-06 17:22:35.303486",
 "disable_prepared_report": 0,
 "disabled": 0,
 "docstatus": 0,
 "doctype": "Report",
 "idx": 0,
 "is_standard": "Yes",
 "letter_head": "DFM Foods Ltd- G.Noida",
 "modified": "2023-01-24 13:32:53.680465",
 "modified_by": "Administrator",
 "module": "Core ERP",
 "name": "BOM vs Actual",
 "owner": "Administrator",
 "prepared_report": 0,
 "ref_doctype": "Production Plan",
 "report_name": "BOM vs Actual",
 "report_script": "\r\n\r\n\t\r\n\r\ndef get_exploded_items(bom,raw = {},s_q=0,n_q=0):\r\n\tbom_q = frappe.db.get_value('BOM',bom,'quantity')\r\n\t\"\"\" Get all raw materials including items from child bom\"\"\"\r\n\titems = frappe.db.sql(\"\"\"select bi.item_code, bi.item_name, bi.bom_no, bi.stock_uom, bi.stock_qty, bi.net_qty, \r\n\t\t\t\tbi.stock_qty / ifnull(%s, 1) AS stock_qty_consumed_per_unit, bi.net_qty / ifnull(%s, 1) AS net_qty_consumed_per_unit,\r\n\t\t\t\t bi.include_item_in_manufacturing from `tabBOM Item` bi where bi.parent = %s\"\"\"%(bom_q,bom_q,frappe.db.escape(bom)), as_dict=1 )\r\n\tfor d in items:\r\n\t\tif d['bom_no']:\r\n\t\t\traw = get_exploded_items(d['bom_no'],raw,(s_q*d['stock_qty_consumed_per_unit']),(n_q*d['net_qty_consumed_per_unit']))\r\n\t\t\t#frappe.msgprint(str(raw))\r\n\t\telse:\r\n\t\t\tif d['item_code'] in raw:\r\n\t\t\t\t#frappe.msgprint(str(d['item_code']))\r\n\t\t\t\traw[d['item_code']] = {\r\n\t\t\t\t\t'stock_entry'\t\t\t\t: '',\r\n\t\t\t\t\t'item_name'\t\t\t\t: d['item_name'],\r\n\t\t\t\t\t'stock_uom'\t\t\t\t: d['stock_uom'],\r\n\t\t\t\t\t'stock_qty'\t\t\t\t: raw[d['item_code']]['stock_qty'] + d['stock_qty_consumed_per_unit'] * s_q,\r\n\t\t\t\t\t'net_qty'\t\t\t\t: raw[d['item_code']]['net_qty']  + d['net_qty_consumed_per_unit'] * n_q,\r\n\t\t\t\t\t'consumed_qty'                          : 0,\r\n\t\t\t\t\t'yield'\t\t\t\t\t: 0,\r\n\t\t\t\t\t'include_item_in_manufacturing': d.get('include_item_in_manufacturing', 0)\r\n\t\t\t\t}\r\n\t\t\t\t#frappe.msgprint(str(raw[d['item_code']]))\r\n\r\n\t\t\telse:\r\n\t\t\t\traw[d['item_code']] = {\r\n\t\t\t\t\t'stock_entry'\t\t\t\t: '',\r\n\t\t\t\t\t'item_name'\t\t\t\t: d['item_name'],\r\n\t\t\t\t\t'stock_uom'\t\t\t\t: d['stock_uom'],\r\n\t\t\t\t\t'stock_qty'\t\t\t\t: d['stock_qty_consumed_per_unit'] * s_q,\r\n\t\t\t\t\t'net_qty'\t\t\t\t: d['net_qty_consumed_per_unit'] * n_q,\r\n\t\t\t\t\t'consumed_qty'\t\t\t\t: 0,\r\n\t\t\t\t\t'yield'\t\t\t\t\t: 0,\r\n\t\t\t\t\t'include_item_in_manufacturing': d.get('include_item_in_manufacturing', 0)\r\n                                }\r\n\t\t\t\t#frappe.msgprint(str(raw[d['item_code']]))\r\n\r\n\treturn raw\r\n\t\r\n\r\n\r\n\t\r\ndef get_data(filters):\r\n    conditions = \"\"\r\n    if filters.get(\"from_date\"):\r\n\t    conditions += \" and date >= '%s'\" % filters[\"from_date\"]\r\n\r\n    if filters.get(\"to_date\"):\r\n\t    conditions += \" and date <= '%s'\" % filters[\"to_date\"]\r\n\r\n    if filters.get(\"company\"):\r\n\t    conditions += \" and company = '%s'\" % filters[\"company\"]\r\n    else:\r\n\t    frappe.throw('Please Select company first')\r\n\t    \r\n    d=frappe.db.sql(\"\"\"SELECT company, production_plan ,name as work_order ,qty as fg_qty, produced_qty,\r\n\tproduction_item as fg_item, item_name as fg_name, bom_no FROM `tabWork Order` where docstatus = 1 and produced_qty > 0 %s \"\"\"%conditions,as_dict=1)\r\n\t\r\n    for r in d:\r\n        r[r['work_order']]=get_exploded_items(r['bom_no'],{},r['fg_qty'],r['fg_qty'])\r\n        se_name=frappe.get_list('Stock Entry',{'work_order': r['work_order']},'name')\r\n        for se in se_name:\r\n            temp=frappe.db.sql(\"\"\"select item_code,sum(qty) as qty from `tabStock Entry Detail` sed, `tabStock Entry` se where sed.parent=%s and sed.parent = se.name and se.docstatus=1 and item_group!='Finished Goods' group by item_code\"\"\",se['name'],as_dict=1)\r\n            for t in temp:\r\n                try:\r\n                    r[r['work_order']][t['item_code']]['stock_entry'] = se['name']\r\n                    r[r['work_order']][t['item_code']]['consumed_qty'] = t['qty']\r\n                    r[r['work_order']][t['item_code']]['yield'] = (t['qty']/r[r['work_order']][t['item_code']]['stock_qty'])*100 \r\n                except:\r\n                    pass\r\n    return d\r\n\r\n\r\n\r\ndef get_columns(filters):\r\n\t\"\"\"return columns\"\"\"\r\n\tcolumns = [\r\n\t\t{\"label\": \"Company\", \"fieldname\": \"company\", \"fieldtype\": \"Link\", \"options\": \"Company\", \"width\": 150},\r\n\t\t{\"label\": \"Production Plan\", \"fieldname\": \"production_plan\", \"fieldtype\": \"Link\", \"options\": \"Production Plan\", \"width\": 150},\r\n\t\t{\"label\": \"Work Order\", \"fieldname\": \"work_order\", \"fieldtype\": \"Link\", \"options\": \"Work Order\", \"width\": 150},\r\n\t\t{\"label\": \"BOM No.\", \"fieldname\": \"bom_no\", \"fieldtype\": \"Link\", \"options\": \"BOM\", \"width\": 150},\r\n\t\t{\"label\": \"FG Item\", \"fieldname\": \"fg_item\", \"fieldtype\": \"Data\", \"width\": 120},\r\n\t\t{\"label\": \"FG Name\", \"fieldname\": \"fg_name\", \"fieldtype\": \"Data\", \"width\": 180},\r\n\t\t{\"label\": \"FG Item Qty\", \"fieldname\": \"fg_qty\", \"fieldtype\": \"Float\", \"width\": 100},\r\n\t\t{\"label\": \"FG Produced Qty\", \"fieldname\": \"produced_qty\", \"fieldtype\": \"Float\", \"width\": 100},\r\n\t\t{\"label\": \"Consumed Items\", \"fieldname\": \"item_code\", \"fieldtype\": \"Link\", \"options\": \"Item\", \"width\": 100},\r\n\t\t{\"label\": \"Item Name\", \"fieldname\": \"item_name\", \"fieldtype\": \"Data\", \"width\": 100},\r\n\t\t{\"label\": \"Stock Entry\", \"fieldname\": \"stock_entry\", \"fieldtype\": \"Link\", \"options\": \"Stock Entry\", \"width\": 150},\r\n\t\t{\"label\": \"Net Qty\", \"fieldname\": \"net_qty\", \"fieldtype\": \"Float\", \"width\": 100},\r\n\t\t{\"label\": \"Gross Qty\", \"fieldname\": \"stock_qty\", \"fieldtype\": \"Float\", \"width\": 100},\r\n\t\t{\"label\": \"Consumed Qty\", \"fieldname\": \"consumed_qty\", \"fieldtype\": \"Float\", \"width\": 100},\r\n\t\t{\"label\": \"% Yield\", \"fieldname\": \"yield\", \"fieldtype\": \"Float\", \"width\": 100}\r\n\t]\r\n\r\n\treturn columns\r\n\t\r\n\r\n\t\r\ncolumns = get_columns(filters)\r\ntemp_data = get_data(filters)\r\n#print(temp_data[0])\r\nlist = []\r\nfor d in temp_data:\r\n\t#print(d)\r\n\tfor item in d[d['work_order']]:\r\n\t\tlist.append([d['company'], d['production_plan'], d['work_order'], d['bom_no'], d['fg_item'],d['fg_name'], d['fg_qty'], d['produced_qty'], item, d[d['work_order']][item]['item_name'],\r\n\t\td[d['work_order']][item]['stock_entry'],d[d['work_order']][item]['net_qty'], d[d['work_order']][item]['stock_qty'], d[d['work_order']][item]['consumed_qty'], d[d['work_order']][item]['yield']  \r\n\t\t])\r\n\r\ndata = [columns, list]\r\n\r\n",
 "report_type": "Script Report",
 "roles": [
  {
   "role": "Manufacturing User"
  },
  {
   "role": "System Manager"
  }
 ]
}